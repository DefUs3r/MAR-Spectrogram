function [ceps log_melspec] = gane_feat(samples,config_file)


if nargin < 1
    error ('Unknown Input - OUTPUT = MAR_FEAT(SAMPLES,CONFIG-FILE');    
end

Time = clock ;
disp ( ' ****************************************** ' );
% disp( ['Noisy Feature Extraction Invoked On ', num2str(datestr(now))]);
% 
% if nargin < 2
%     disp ('Using default configuration from matlab.config file');
%     config_file = 'matlab.config';
% end
% tic ;
%*****************************************************************
param = read_config_file(config_file) ;
%*****************************************************************

if max(abs(samples)) < 1
    samples = samples * 2^15;           % Making the samples to raw format
end
d = samples;
A = samples(:);
sr = param.fs;
param.flen= (param.fr_len/1000)*sr;           % frame length corresponding to 25ms
param.fhop= (param.fr_shift/1000)*sr;         % frame overlap corresponding to 10ms
fnum = floor((length(A)-param.flen)/param.fhop)+1;
send = (fnum-1)*param.fhop + param.flen;
A = A(1:send);
if param.fullsig
   fdlpwin = send;	
else
   fdlpwin = param.fdlplen*sr;             % MAR window length
end

fdlpolap = ceil((param.fr_len-param.fr_shift)/10)*sr/100;
[X,add_samp] = frame_new(A,fdlpwin,fdlpolap);
ceps = [];

for i = 1 :size(X,2)                    % Go over each MAR window
    x = X(:,i);
    % Now lets dither (make sure the original waves are not normalized!)
    x = ditherit(x);
    x = x - 0.97* [0 ; x(1:end-1)];                 % Pre-emphasis
    % processing starts here
    temp = do_feats_for_seg(x,param);
    ceps = [ceps temp];
end
ceps = ceps(:,1:fnum);
% toc;
% disp ( ['Completed ' num2str(fnum) ' feature vectors of dim ' num2str(size(ceps,1)) ...
%     ' for a ' num2str(send/param.fs) ' sec file'])
% disp ( ' ****************************************** ' );

%%

% Calculate the log Mel-spectrogram
log_melspec = log_mel_spectrogram(signal, fs);

% Use SGBFB features (only for two phase combinations and without histogram equalization)
feature_extraction = @(x) sgbfb(x, [], [], [], [], {[0 0], [pi/2 pi/2]});


%% Learn resynthesis matrix as SGBFB is linear
context = 20; % Maximum temporal context in frames that SGBFB filters have
num_context = 20*2+1;
num_noise_samples = 20000;
noise = randn(size(log_melspec,1), num_noise_samples);
noise_features = feature_extraction(noise);
% Create context
noise_context = zeros(size(noise).*[num_context,1]);
for i=-context:context
  noise_context(1+size(noise,1)*(context+i):size(noise,1)*(context+i+1),max(1,1+i):min(end,end+i)) = noise(:,max(1,1+i):min(end,end+i));
end
sgbfb_resyn_matrix = noise_context(:,1+context:end-context) / noise_features(:,1+context:end-context);


%% Resynthesis
% features = feature_extraction(log_melspec);
% 
% % Apply pseudo-inverse SGBFB feature extraction
% log_melspec_resyn_context = sgbfb_resyn_matrix * features;
% 
% % Merge/average context
% log_melspec_resyn = zeros(size(log_melspec_resyn_context)./[num_context,1]);
% for i=-context:context
%   log_melspec_resyn(:,max(1,1+i):min(end,end+i)) = log_melspec_resyn(:,max(1,1+i):min(end,end+i)) + ...
%     log_melspec_resyn_context(1+size(log_melspec_resyn,1)*(context+i):size(log_melspec_resyn,1)*(context+i+1),max(1,1+i):min(end,end+i));
% end
% log_melspec_resyn = log_melspec_resyn./num_context;

